[project]
requires-python = ">=3.10"

[tool.poetry]
name = "Advent of Code"
package-mode = false
version = "0.1.0"
description = "My solutions to the advent of code"
authors = ["Sebastian Birk <sebastian.birk@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.dev-dependencies]
black = ">=24"
ruff = ">=0.8.0"
pytest = ">=8"
pre-commit = "^4.0.1"

[tool.black]
line-length = 120
target-version = ['py310']

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_unimported = false
disallow_untyped_defs = true
explicit_package_bases = true
no_implicit_optional = false
show_error_codes = true
warn_return_any = false
warn_unused_ignores = true

[tool.ruff]
line-length = 120
target-version = "py310"
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "W",  # pycodestyle
    "B",  # bugbear
    "RUF", # ruff
]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
]
fixable = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "W",  # pycodestyle
    "B",  # bugbear
    "RUF", # ruff
]

[tool.pylint.MASTER]
fail-under = '10.0'
ignore = '.git'
jobs = 4

[tool.pylint."MESSAGES CONTROL"]
disable = '''
        broad-exception-caught,
        fixme,
        import-error,
        missing-module-docstring,
        missing-class-docstring,
        missing-function-docstring,
        no-member,
        too-few-public-methods
'''

[tool.pylint.REPORTS]
evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
output-format = 'text'
score = 'yes'

[tool.pylint.REFACTORING]
max-nested-blocks = 4
never-returning-functions = 'sys.exit'

[tool.pylint.LOGGING]
logging-format-style = 'new'
logging-modules = 'logging'

[tool.pylint.FORMAT]
expected-line-ending-format = 'LF'
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
indent-after-paren = 4
indent-string = '    '
max-line-length = 120
max-module-lines = 250

[tool.pylint.SIMILARITIES]
ignore-comments = 'yes'
ignore-docstrings = 'yes'
ignore-imports = 'no'
min-similarity-lines = 4

[tool.pylint.BASIC]
argument-naming-style = 'snake_case'
attr-naming-style = 'snake_case'
class-naming-style = 'PascalCase'
const-naming-style = 'UPPER_CASE'
docstring-min-length = -1
function-naming-style = 'snake_case'
good-names = '''i,
           j,
           k,
           ex,
           e,
           Run,
           pk,
           fd,
           x,
           y,
           _
'''
good-names-rgxs = ''
include-naming-hint = 'no'
inlinevar-naming-style = 'any'
method-naming-style = 'snake_case'
module-naming-style = 'snake_case'
variable-naming-style = 'snake_case'

[tool.pylint.STRING]
check-quote-consistency = 'no'
check-str-concat-over-line-jumps = 'no'

[tool.pylint.IMPORTS]
allow-any-import-level = ''
allow-wildcard-with-all = 'no'
analyse-fallback-blocks = 'no'
deprecated-modules = 'optparse,tkinter.tix'
ext-import-graph = ''
import-graph = ''
int-import-graph = ''
known-standard-library = ''
known-third-party = 'enchant'
preferred-modules = ''

[tool.pylint.CLASSES]
defining-attr-methods = '''__init__,
                      __new__,
                      setUp,
                      __post_init__
'''
exclude-protected = '''_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make
'''
valid-classmethod-first-arg = 'cls'
valid-metaclass-classmethod-first-arg = 'cls'

[tool.pylint.DESIGN]
max-args = 10
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 2
max-statements = 50
min-public-methods = 2

[tool.isort]
py_version = 310
profile = "black"
line_length = 120
